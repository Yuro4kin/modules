import sqlite3 as sq
# SQLite #10: avatar - Рассмотрим способ хранения в БД

# Рассмотрим способ хранения в БД
# Например есть список пользователей и у каждого пользователя есть свой аватар(изображение)
# Создадим таблицу в БД, чтоб содержала поле ава с типом BLOB.
# BLOB - это тип представленный в бинарном виде для изображений

# функция читать изображение, n - номер аватарки, аватарка хранится в подкаталоге avas
# 1.png, 2.png - {n}.png
# "rb" - ф0лаг
# указываем флаг rb - удем читать данные в бинарном режиме
# после того как данные прочитаны - эта функция будет возвращать return прочитанные данные файлы аватарки 
def readAva(n):
    try:
        with open(f"avas/{n}.png", "rb") as f:
            return f.read()
    # если ошибка функция возвращает false    
    except IOError as e: 
        print(e)
        return False


# 2. чтоб убедились, что корректно прочитали данные, объявим функцию,
# 2. которая будет записывать данные в виде графического файла
# 2. передаем имя файла name который будем записывать, data - сами данные 
def writeAva(name, data):
    try:
        # 2. открываем файл на запись в бинарном режжиме
        with open(name, "wb") as f:
            # 2. записываем данные
            f.write(data)
    except IOError as e:
        # 2. Если произошла ошибка, то она отображается в консоли, ф-ция возвращает False
        print(e)
        return False
    # 2. запись прошла успешно - функция возвращает True
    return True




with sq.connect("cars.db") as con:
    con.row_factory = sq.Row
    cur = con.cursor()
        
    cur.executescript("""CREATE TABLE IF NOT EXISTS users (
        name TEXT,
        ava BLOB,
        score INTEGER)
    """)

    # 2. прочитаем изображение из таблицы users
    # 2. будем выбирать ava из таблицы users, возьмем только первую запись
    # 2. из этой первой записи прочитаем бинарные данные, спомощью метода fetchone()
    # 2. обращаемся к бинарным данным через имя 'ava'.
    # 2. Если б не было строки con.row_factory = sq.Row, обращались бы по индексу [0]
    cur.execute("SELECT ava FROM users LIMIT 1")
    img = cur.fetchone()['ava']



    # прочитаем аватарку, например первую (1)
#    img = readAva(1)
    # если чтение произошло успешно, то деламем преобразование
#    if img:
        # с помощью метода Binary - реобразовываем бинарные данные
        # в специальный бинарный объект модуля SQLite. В БД можем записать специальный бинарный объект
#        binary = sq.Binary(img)
        # вызываем SQL запрос
#        cur.execute("INSERT INTO users VALUES ('Alex', ?, 1000)", (binary,))



    # 2. выполним запись информации в файл out.png, передаем данные из нашего поля "ava"
    writeAva("out.png", img)
    # 2. проверяем файл out.png



# Вот так можно сошествлять чтение и запись изображений в БД 

















            
    

