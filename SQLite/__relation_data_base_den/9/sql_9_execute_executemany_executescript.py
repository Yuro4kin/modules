import sqlite3 as sq
# SQLite #9: Методы execute, executemany, executescript

# поговорим о методах пакета sqlite3, то есть, об API данной СУБД
# для базовой работы с БД можно использовать менеджер контекста
# связываемся с БД с помощью ключевого слова with, которое определяет менеджер контекста
# далее пишем БД с которой связываемся, это ссылка на данный объект
# далее работаем через эту ссылку, получаем курсор cur, уже через курсор cur
# выполняем определенные команды sql запроса



cars = [
    ('Audi', 52642),
    ('Mercedes', 57127),
    ('Skoda', 9000),
    ('Volvo', 29000),
    ('Bentley', 350000)
]


with sq.connect("cars.db") as con:
    cur = con.cursor()

#       execute - определенные sql запросы - создаем таблицу с именем cars и полями
    cur.execute("""CREATE TABLE IF NOT EXISTS cars (
        car_id INTEGER PRIMARY KEY AUTOINCREMENT,
        model TEXT,
        price INTEGER
    )""")


# добавим в таблицу cars несколько записей - выполнив SQL запросы
##    cur.execute("INSERT INTO cars VALUES(1,'Audi',52642)")
##    cur.execute("INSERT INTO cars VALUES(2,'Mercedes',57127)")
##    cur.execute("INSERT INTO cars VALUES(3,'Skoda',9000)")
##    cur.execute("INSERT INTO cars VALUES(4,'Volvo',29000)")
##    cur.execute("INSERT INTO cars VALUES(5,'Bentley',350000)")



# когда мы программируем на Python, то данные, как правило,
# хранятся в каких-либо коллекциях, например, так:
##cars = [
##    ('Audi', 52642),
##    ('Mercedes', 57127),
##    ('Skoda', 9000),
##    ('Volvo', 29000),
##    ('Bentley', 350000)
##]


# мы бы хотели брать значения из этого списка и передавать их в SQL-запрос.
# Для этого запрос следует записывать в виде следующего шаблона:
#-----cur.execute("INSERT INTO cars VALUES(NULL, ?, ?)", cars[0]) - не выполнять
    #                                          ? - первое значение будет подставлено из списка
    #                                             ? - второе значение из списка

# Например мы хотим в таблице добавить все строчки - переберем коллекцию for:
#    for car in cars:
#        cur.execute("INSERT INTO cars VALUES(NULL, ?, ?)", car)
# у нас добавилось еще 5 строчек, выполнился цикл, и добавились автомобили из коллекции


# еще проще, воспольземся методом executemany, который перебирает автоматически коллекцию
# подставляет вместо знаков вопросов, значения из наших кортежей
#    cur.executemany("INSERT INTO cars VALUES(NULL, ?, ?)", cars)


# Плейсхолдеры
# помимо знаков вопроса можно использовать именованные параметры (плейсхолдеры)
# Для этого в запросе перед ними ставится двоеточие, а затем, указывается
# словарь, где имя – это ключ, вместо которого будет подставлено его значение:
#    cur.execute("UPDATE cars SET price = :Price WHERE model LIKE 'A%'", {'Price': 0})
# :Price - именованый параметр 
# {'Price': 0} - словарь, где ключ является именем параметра Price
# значение ключа будет подставлено вместо него
# В результате такого запроса для всех автомобилей модель которых начинается с буквы A
# цену установим в 0

# ? - это неименованый параметр, который подставляется по индексу из нашей коллекции


# Например, нам нужно выполнить несколько отдельных SQL-команд,
# то можно передать их СУБД с помощью метода executescript:
    cur.executescript("""DELETE FROM cars WHERE model LIKE 'A%';
        UPDATE cars SET price = price+1000
    """)
# сначала удалили все записи, у которых модель начинается на букву A,
# а затем у оставшихся записей увеличиваем цену на 1000.
# Причем, команды должны отделяться друг от друга точкой с запятой.
# У метода .executescript() есть одно ограничение: здесь нельзя
# использовать шаблоны запросов, как мы это делали в предыдущих методах.
# В executescript буквально записываются SQL-запросы как есть со всеми данными.










    # Когда контекстный менеджер завершает свою работу,
    # он автоматически выполняет два метода:
#    con.commit()    # - сохраняет все изменения в БД
#    con.close()     # - закрывает соединение с БД













