# SQLite #4: команды UPDATE и DELETE при работе с таблицами БД

# SQL-запросов и поговорим об изменении и удалении записей из таблицы. Как и ранее, воспользуемся программой DB Browser и изучим работу команд:
# UPDATE – изменение данных в записях;
# DELETE – удаление записей из таблицы.


# Синтаксис:
# UPDATE имя_таблицы SET имя_столбца = новое_значение WHERE условие
# Выполним обнуление поля payments - платежей у всех пользователей.
# Такой запрос встречается крайне редко, т.к. он применяется и изменяются все записи в таблице
# UPDATE users SET payments = 0


# в качестве фильтра используем скрытый столбец rowid с уникальным значением
# номера для каждой записи и это гарантирует нам, что изменение затронет только одну первую запись
# (именно у нее в нашем случае rowid =1, однако, это не всегда так:
# Будем менять кол-во чков на 1000 для записей с rowid = 1
# UPDATE users SET payments = 1000 WHERE rowid = 1


# Всем покупателям женского пола увеличим число платежей на 500:
# Новому значению payments присваиваем значение + 500
# UPDATE users SET payments = payments + 500 WHERE sex = 2


# Обратимся к штатам по названию и присвоим им определенное число платежей:
# UPDATE users SET payments = 1500 WHERE  names_of_states = 'Louisiana'


# Здесь ключевое слово LIKE возвращает True, если поле names_of_states содержит имя «Louisiana».
# В этой строке можно использовать ШАБЛОН - специальные символы:
# % - любое продолжение строки;
# _ - любой символ;
# для создания сравнения с шаблоном. Например, так:


# Всем штатам добавим по 100 payments, у которых имя начинается с буквы «М» 
# UPDATE users SET payments = payments+100 WHERE name LIKE 'M%'


# Здесь шаблон «'L_an%» означает первую букву «S», за которой может идти произвольный
# символ из имени, далее буквы an , затем, произвольный набор символов.
# увеличим на 100
# UPDATE users SET payments = payments + 100 WHERE names_of_states LIKE 'L_ui%'
# присвоим значение 700
# UPDATE users SET payments = 700 WHERE names_of_states LIKE 'L_ui%'


# -------------------------------------

# на практике злоупотреблять сравнением строк не стоит,
# т.к. это относительно ресурсоемкая операция: гораздо проще выполнить
# сравнение чисел и именно так нужно стараться задавать фильтры


# Поменяем значения сразу несколько столбцов записи, перечисляя их через запятую
# Возьмем delivery_time по штатам больше 20 и увеличим payments + 50
# UPDATE users SET payments = payments + 50 WHERE delivery_time > 20


# Увеличим значение нескольких полей, payments = +50 и delivery_time > 20
# UPDATE users SET payments = payments + 50 WHERE delivery_time > 20


# DELETE - удаление записи из БД, Синтаксис следующий:
# DELETE FROM имя_таблицы WHERE условие
# Указывается имя таблицы, из которой осуществляется удаление и, затем,
# условия для выбора удаляемых записей. Обычно, в качестве фильтра задается
# строгое условие, чтобы случайно не удалить «лишние» данные
# и для этого хорошо подходит скрытое поле rowid
#                         номера рядов для удаления                 
# DELETE FROM users WHERE rowid IN(2, 5)

# Код работает, если в sql запросах нет другого кода
# отобразим нашу таблицу платежей, получим такой список в котором нет строк
# с удаленными значениями rowid
# SELECT rowid, * FROM users

# если сейчас добавить новую запись: - запросы можно передавать выделяя строку
# DELETE FROM users WHERE rowid IN(6, 8)
# SELECT rowid, * FROM users
# INSERT INTO users VALUES(8, 'California', 2, 24, 1200)

# получим запись с rowid равным 8, так как это поле автоматически принимает
# следующее значение. Поэтому оно не равно порядковому номеру записи в таблице,
# это лишь некое уникальное числовое значение записи и не более того.
# Вот это всегда следует иметь в виду при работе с таблицами БД.




