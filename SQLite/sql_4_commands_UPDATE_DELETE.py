# SQLite #4: команды UPDATE и DELETE при работе с таблицами БД

# SQL-запросов и поговорим об изменении и удалении записей из таблицы. Как и ранее, воспользуемся программой DB Browser и изучим работу команд:
# UPDATE – изменение данных в записях;
# DELETE – удаление записей из таблицы.

# Синтаксис
# UPDATE имя_таблицы SET имя_столбца = новое_значение WHERE условие
# Выполним обнуление поля score - очков у всех пользователей.
# Такой запрос встречается крайне редко, т.к. он затрагивает изменение всех записей в таблице
# UPDATE users SET score = 0

# в качестве фильтра используем скрытый столбец rowid с уникальным значением
# номера для каждой записи и это гарантирует нам, что изменение затронет только одну первую запись
# (именно у нее в нашем случае rowid =1, однако, это не всегда так:
# Будем менять кол-во чков на 1000 для записей с rowid = 1
# UPDATE users SET score = 1000 WHERE rowid = 1

# Всем игрокам женского пола увеличим число очков на 500:
# UPDATE users SET score = score+500 WHERE sex = 2

# Обратимся к игрокам по имени и присвоим им определенное число очков:
# UPDATE users SET score = 1500 WHERE name LIKE 'Fedor'

# Здесь ключевое слово LIKE возвращает True, если поле name содержит имя «Fedor».
# В этой строке можно использовать специальные символы:
# % - любое продолжение строки;
# _ - любой символ;
# для создания сравнения с шаблоном. Например, так:

# Всем игрокам, у которых имя начинается с буквы «М» будет добавлено 100 очков/
# UPDATE users SET score = score+100 WHERE name LIKE 'M%'

# Здесь шаблон «'S_rg%» означает первую букву «S», за которой может идти произвольный
# символ из имени, далее буквы r и g и, затем, произвольный набор символов.
# UPDATE users SET score = score+100 WHERE name LIKE 'S_rg%'
# на практике злоупотреблять сравнением строк не стоит,
# т.к. это относительно ресурсоемкая операция: гораздо проще выполнить
# сравнение чисел и именно так нужно стараться задавать фильтры

# Поменяем значения сразу несколько столбцов записи, перечисляя их через запятую
# Возьмем возраст всех игроков больше 40 и присвоим им возраст по 800 очков 
# UPDATE users SET score = 700 WHERE old > 40

# Поменяем значение нескольких полей, возраст = 45 и кол-во очков = 800
# UPDATE users SET score = 700, old = 45 WHERE old > 40

# Синтаксис следующей команды для удаления записи из БД, следующий:
# DELETE FROM имя_таблицы WHERE условие
# Указывается имя таблицы, из которой осуществляется удаление и, затем,
# условия для выбора удаляемых записей. Обычно, в качестве фильтра задается
# строгое условие, чтобы случайно не удалить «лишние» данные
# и для этого хорошо подходит скрытое поле rowid
#                         номера рядов для удаления                 
# DELETE FROM users WHERE rowid IN(2, 5)

# Код работает, если в sql запросах нет другого кода
# отобразим нашу таблицу игроков, получим такой список в котором нет строк
# с удаленными значениями rowid
# SELECT rowid, * FROM users

# если сейчас добавить новую запись:
# INSERT INTO users VALUES('Даша', 2, 24, 1200)
# INSERT INTO users VALUES(9,'Dasha', 2, 24, 1200)

# получим запись с rowid равным 9, так как это поле автоматически принимает
# следующее значение. Поэтому оно не равно порядковому номеру записи в таблице,
# это лишь некое уникальное числовое значение записи и не более того.
# Вот это всегда следует иметь в виду при работе с таблицами БД.




