# Jinja2 #2: Экранирование и блоки raw, for, if
# ассмотрим способы экранирования данных в строках
from jinja2 import Template, escape


# Например, представим, что фрагмент шаблона, хотели бы никак не преобразовывать
data = ''' Модуль Jinja вместо
           определения {{name}}
           подставляет соответствующее значение'''

# Сформируем шаблон на основе класса Template, выполним метод render, тогда
# вместо name будет подставлено Alex
tm = Template(data)
msg = tm.render(name='Alex')

print(msg)


# Специальный блок {% raw %}...{% endraw %}
# Все, что помещается внутри этого блока никак не будет преобразовано
data1 = '''{% raw %} Модуль Jinja вместо
            определения {{name}}
            подставляет соответствующее значение{% endraw %}.'''
# На выходе получаем строчки, которые были заключены внутри блока raw
tm1 = Template(data1)
msg1 = tm1.render(name='Alex')

print(msg1)

# -------------------------------------------------------------------

# При работе с текстовыми шаблонами часто возникает потребность в экранировании
# некоторых символов, которые браузер воспринимает, как определение тегов
link = '''В HTML-документе ссылки определяются так: 
<a href="#">Ссылка</a>'''

# Создадим шаблон на основе этого текста
tm2 = Template(link)
msg2 = tm2.render()
# На выходе получим текст и тег <а.../a>, которые у нас и есть 
print(msg2)


# e – escape (экранирование). Браузерэкранированные символы воспринимает как теги
# Сформируем шаблон, где будет помещена и отображена некая переменная link
# и далее после вертикальной черты указать вертикальный флаг |e - экранирование спец. символов
link1 = '''В HTML-документе ссылки определяются так: 
<a href="#">Ссылка1</a>'''

tm3 = Template("{{ link1 | e }}")
msg3 = tm3.render(link1=link1)
# еперь вместо ссылки видим в браузере, что идет в тексте <a href="#">Ссылка1</a> 
print(msg3)
# &lt;a href=&#34;#&#34;&gt;Ссылка1&lt;/a&gt;


# escape - (экранирование) - возможно импортировать import подключить Template, escape
link2 = '''В HTML-документе ссылки определяются так: 
<a href="#">Ссылка2</a>'''

msg4 = escape(link2)
print(msg4)

# -------------------------------------------------------------------

# Блок for - позволяет экранировать список на основе любого итерируемого объекта
# например упорядоченного списка
# {% for <выраение> -%}
# <повторяемый фрагмент>
# {% endfor %}

#           id - БД
cities = [{'id': 1, 'city': 'Москва'},
          {'id': 5, 'city': 'Тверь'},
          {'id': 7, 'city': 'Минск'},
          {'id': 8, 'city': 'Смоленск'},
          {'id': 11, 'city': 'Калуга'}]

# формируется тег select для HTML-документа
link3 = '''<select name="cities">
{% for c in cities %}
    <option value="{{c['id']}}">{{c['city']}}</option>
{% endfor %}
</select>'''
 
tm5 = Template(link3)
msg5 = tm5.render(cities = cities)
 
print(msg5)

# здесь имеется список из городов и их id (например, в соответствии с rowid БД SQLite)
# и, затем, формируется тег select для HTML-документа.
# Внутри размещаются теги option по указанному формату для каждого города.
# Перебираем коллекцию cities - for c in cities

# Запись в одну строчку - внесем изменения в шаблон, запишем в одну строку
link4 = '''<select name="cities">
{% for c in cities %}<option value="{{c['id']}}">{{c['city']}}</option>{% endfor %}
</select>'''
tm6 = Template(link4)
msg6 = tm6.render(cities = cities)
print(msg6)


# Запись строчек друг за другом в столбик {%  -%}, также добавлен перенос строки после option
# {%  -%}  убирает пустую строку до select
# {%-  -%} убирает все переносы select
# {%-  %}  убирает перенос перед select
link5 = '''<select name="cities">
{% for c in cities -%}
    <option value="{{c['id']}}">{{c['city']}}</option>
{% endfor -%}
</select>'''
tm7 = Template(link5)
msg7 = tm7.render(cities = cities)
print(msg7)



print("------------if--------------")
# -------------------------------------------------------------------
# Блок для проверки условий выражение  if. Если условие истинно в шаблон
# помещается условие, которое стоит внутри этого блока

# {% if  <условие> %}
#     <фрагмент при истинности условия>
# {% endif %}

# Добавим проверку, что добавлять следует только те города, у которых id > 6,
# то добавляется тег <otion > нутрь тега <select>
link6 = '''<select name="cities">
{% for c in cities -%}
{% if c.id > 6 -%}
    <option value="{{c['id']}}">{{c['city']}}</option>
{% endif -%}
{% endfor -%}
</select>'''
# Теперь появились города у которых id >6
tm8 = Template(link6)
msg8 = tm8.render(cities = cities)
print(msg8)


print("------------if---else-----------")
# Конструкция else выполнится, если условие if c.id > 6 ложно
# предположим, что по конструкции else мы будем выводить просто имя города без тега <option>
link7 = '''<select name="cities">
{% for c in cities -%}
{% if c.id > 6 -%}
    <option value="{{c['id']}}">{{c['city']}}</option>
{%else -%}
    {{c['city']}}
{% endif -%}
{% endfor -%}
</select>'''
# Москва и Тверь без тега <option>, т.к. у них else выполнился, их id < 6
tm9 = Template(link7)
msg9 = tm9.render(cities = cities)
print(msg9)


print("------------if--else--elif-----------")
# Конструкция elif, здесь идет дополнительно проверка, т.е. если эта проверка id > 6 не прошла
# то мы делаем такую проверку elif  c.city == "Москва", если она прошла, то добавляется тег <option>
# Если проверка elif не прошла переходим на else и выполняем конструкцию 'city'
link8 = '''<select name="cities">
{% for c in cities -%}
{% if c.id > 6 -%}
    <option value="{{c['id']}}">{{c['city']}}</option>
{%elif c.city == "Москва" -%}
    <option>{{c['city']}}</option>
{%else -%}
    {{c['city']}}
{% endif -%}
{% endfor -%}
</select>'''
tm10 = Template(link8)
msg10 = tm10.render(cities = cities)
print(msg10)
# В теге option без value - <option>Москва</option> - выполнилось elif
# Все остальное помещено в tag <option> со значением value 
# Тверь идет по else - поэтому имя города не отображается

























