# Jinja2 #2: Экранирование и блоки raw, for, if
# ассмотрим способы экранирования данных в строках
from jinja2 import Template


# Например, представим, что фрагмент шаблона, хотели бы никак не преобразовывать
data = ''' Модуль Jinja вместо
           определения {{name}}
           подставляет соответствующее значение'''

# Сформируем шаблон на основе класса Template, выполним метод render, тогда
# вместо name будет подставлено Alex
tm = Template(data)
msg = tm.render(name='Alex')

print(msg)


# Специальный блок {% raw %}...{% endraw %}
# Все, что помещается внутри этого блока никак не будет преобразовано
data1 = '''{% raw %} Модуль Jinja вместо
            определения {{name}}
            подставляет соответствующее значение{% endraw %}.'''
# На выходе получаем строчки, которые были заключены внутри блока raw
tm1 = Template(data1)
msg1 = tm1.render(name='Alex')

print(msg1)

# -------------------------------------------------------------------

# При работе с текстовыми шаблонами часто возникает потребность в экранировании
# некоторых символов, которые браузер воспринимает, как определение тегов
link = '''В HTML-документе ссылки определяются так: 
<a href="#">Ссылка</a>'''

# Создадим шаблон на основе этого текста
tm2 = Template(link)
msg2 = tm2.render()
# На выходе получим текст и тег <а.../a>, которые у нас и есть 
print(msg2)


# e – escape (экранирование). Браузерэкранированные символы воспринимает как теги
# Сформируем шаблон, где будет помещена и отображена некая переменная link
# и далее после вертикальной черты указать вертикальный флаг |e - экранирование спец. символов
link1 = '''В HTML-документе ссылки определяются так: 
<a href="#">Ссылка1</a>'''

tm3 = Template("{{ link1 | e }}")
msg3 = tm3.render(link1=link1)
# еперь вместо ссылки видим в браузере, что идет в тексте <a href="#">Ссылка1</a> 
print(msg3)
# &lt;a href=&#34;#&#34;&gt;Ссылка1&lt;/a&gt;

# 4:00





