# Jinja2 #6: Наследование расширение шаблонов
from jinja2 import Environment, FileSystemLoader


# Механизм расширения шаблонов в Jninja
# это инструмент, уменьшающий объем дублируемого кода в шаблонах
# Общий синтаксис именованных блоков:
# {% block <имя блока> %}
# содержимое данного именованного блока
# {% endblock %}

# about.html - будет расширять ex_main.html, т.к. мы прописали в about.html
# возьмем шаблон about.html и получим его конкретное представление

# наполним содержимым блок - список из предметов
subs = ["Math", "Phisics", "Programming", "Literature"]
 
file_loader = FileSystemLoader('jinja_6_inheritance')
env = Environment(loader=file_loader)
 
template = env.get_template('about.html') # получаем экземпляр класса .get_template()
 
output = template.render(list_table = subs)
print(output)

# В шаблоне about.html - дублирование с тега title
# <h1>{{ self.title() }}</h1>
# self - параметр, .title - обращаемся к блоку, () - вызываем как ф-цию, чтоб вывел свое содержимое

# {{ super() }} - для обращения к блоку базового шаблона и взятия оттуда информации
# В это место блока контента будет подставлено содержимое блока контента, но из базового шаблона
# В базовом шаблоне default.tpl пропишем следующее
# Через метод super() можно обращаться из дочерних шаблонов к соответств. блокам базового шаблона

# {% block content %} - полностью переписывает значение блока, но в базовом шаблоне
# чтобы не было в базовом шаблоне будет удалено, и добавлено только то, что прописано в дочернем
# {{ super() }} - если мы хотим что-то взять из базового шаблона


# вложенные блоки - {% block table_contents %}...{% endblock table_contents %}
# в дочернем шаблон about.htm вызываем {{ super }} - теперь вложенный блок будет подставлен
# наполним содержимым блок - список из предметов
# subs = ["Math", "Phisics", "Programming", "Literature"]
# {% block table_contents %}{{ super() }}{% endblock %} - более гибкий вариант для именованных блоков
# если на странице не нужно это содержание - убираем этот блок - таким образом расширяем базовый шаблон

# усовершенствуем базовый шаблон и добавим блок с формированием списка
# scoped - если данные не входят в блок <li>
# {% block item %}<p class="item">{{ super() }}</p>{% endblock %} - подставим содержимое этого блока
# название предмета внутрь тега <p >
# с помощью добавления данного блока мы можем более тонко работать с нашим списком 

# Шаблоны поддерживают вложенное наследование
# base.tpl
#   ^
# child1.html
#   ^
# child2.html
# формирование итогового дочернего шаблона по цепочке от базового до корневого:
# файл base.tpl – такой же как и ex_main.htm:
# файл child1.htm: {% extends 'base.tpl' %} …
# файл child2.htm: {% extends 'child1.htm' %} …

# https://jinja.palletsprojects.com/en/2.11.x
# - расширение базовых классов пакета для создания рендеринга шаблонов
# - реализация собственного загрузчика




